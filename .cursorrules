# Worldgen Project Context

## Problem Statement
The current world generation system produces boring, predictable world layouts using simple geometric patterns. Players experience repetitive environments that lack the organic complexity and natural beauty found in real-world landscapes.

## Our Strategy
We are implementing **Lichtenberg fractal-based world generation** to create more engaging, naturally-structured game worlds:

1. **Fractal Foundation**: Use Lichtenberg fractals (electrical discharge patterns) to generate organic, branching world graphs that mimic natural phenomena like river networks, cave systems, and mountain ridges.

2. **Ecosystem Integration**: Map fractal vertices to appropriate ecosystems based on distance from caldera centers, creating realistic biome distributions.

3. **Performance-First Approach**: Maintain O(N) or better algorithmic complexity and use pure functional programming patterns throughout the implementation.

4. **Visual Development**: Integrate real-time fractal visualization into the worldgen tooling to enable rapid iteration and debugging.

## Current Focus
- Completing the worldgen visualization integration for Lichtenberg fractals

## Key Constraints
- No object-oriented programming - use pure functions only
- Prioritize algorithmic efficiency (O(N) or better complexity preferred)
- All code must be immediately runnable
- Unit tests should be pure and deterministic
- Use tilde (~) path alias for `src` directory references and `@flux` for flux-game imports.
